package ${package}.${service}.${prefix}.${serviceImpl};

import com.haday.qms.service.base.impl.BaseServiceImpl;
import com.haday.qms.core.tool.utils.CollUtils;
import ${package}.${service}.${prefix}.${name}Service;
import ${package}.${dao}.${prefix}.${name}Mapper;
import ${package}.${entity}.${prefix}.${name};
import org.springframework.stereotype.Service;
import com.haday.qms.core.tool.utils.CollUtils;
import java.util.List;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import com.haday.qms.core.tool.support.PlainWrapper;

#if($buildSelectList||$buildSelectPage)
import com.haday.qms.interceptor.anno.Try;
import com.haday.qms.vo.SearchVo;
import com.alibaba.fastjson2.JSONObject;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
#end

/**
* @author ${author}
*/
@Service
@Slf4j
public class ${name}ServiceImpl extends BaseServiceImpl<${name}Mapper, ${name}>
    implements ${name}Service {


    @Transactional(rollbackFor = Exception.class)
    public Integer batchMerge(List<${name}> list) {
        batchSetHis(list.stream().map(${name}::getId));
        list.forEach(e -> e.setId(null));
        return super.batchAdd(list);
    }

      /**
     * 逻辑删除 ，且不可恢复
     */
    public void batchSetHis(Object ids) {
        List<Integer> idList = CollUtils.toIntList(ids);
        if (idList.isEmpty()) {
            return;
        }
        update().set("hisTag", 2)
                .in("id", idList)
                .update();
    }


    public Page<Map<String,Object>> search(JSONObject obj) {
        PlainWrapper wrapper = PlainWrapper.ofObj(obj);
        return baseMapper.select(wrapper.buildPage(), wrapper);
    }



#if(${buildExport})##
    public Page<?> export(JSONObject body, Page<?> page) {
        return search(getExportJson(body, page));
    }
#end ##

}

