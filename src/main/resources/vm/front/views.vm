<template>
  <el-container style="background-color: #ffffff; height: calc(100vh - 100px); width: 100% ; min-height: 400px">
    <el-main>
      <vxe-page-grid
         ref="xGrid"
         :columns="columns"
         :form-data="formData"
         size="mini"
         :page-size="40"
         :page-sizes="[40,100,200]"
         :height-light="true"
         :toolBar="{ refresh: {query: reload}, filter: { columns } }"
         :search="searchMethod"
          #if($delCol)init-cond="${delCol.col} = 0"#end##
         overflow
         :rowStyle="rowStyle"
      >
        <template #btns>
          <vxe-search-btn ref="searchForm" :search-form="searchForm" height="auto" width="500" @submit="searchByBtn"/>
          <vxe-add-btn
              :title="'新增'+entity"
              :form-data="addForm"
              :before-show="beforeShowAdd"
              :add-method="batchAddMethod"
              :after-add="search"
          />
          <vxe-update-btn
              :x-grid="$refs.xGrid"
              :title="'调整'+entity"
              :form-data="updateForm"
              :before-show="beforeShowUpdate"
              :param-convert="({form})=> [ form ]"
              :update-method="batchUpdateMethod"
              :after-add="reloadPage"
          />
#if($delCol)##
              <vxe-modify-btn
                  :x-grid="$refs.xGrid"
                  icon="el-icon-check"
                  status="warning"
                  :validate="reuseValidate"
                  name="生效"
                  :method="batchUpdateMethod"
                  :param-convert="({rows})=>  rows.map(e=> e = {${pkCol.col}: e.${pkCol.col} , ${delCol.col}: 0} ) "
                  :after-modify="reloadPage"
              />
              <vxe-modify-btn
                  :x-grid="$refs.xGrid"
                  icon="el-icon-delete"
                  status="danger"
                  :validate="deleteValidate"
                  name="废止"
                  :method="batchUpdateMethod"
                  :param-convert="({rows})=>  rows.map(e=> e = {${pkCol.col}: e.${pkCol.col} , ${delCol.col}: 1} ) "
                  :after-modify="reloadPage"
              />#end
          <vxe-delete-btn
              :x-grid="$refs.xGrid"
              :delete-method="batchDeleteMethod"
              :popup-validate="deleteValidate"
              :after-delete="reloadPage"
          />
          <vxe-import-btn
              :x-grid="$refs.xGrid"
              :title="entity+'导入模板'"
              :form-data="addForm"
              :identify-enter="true"
              :add-method="batchMergeMethod"
              :after-add="trySearch"
          />
          <vxe-export-btn
              :x-grid="$refs.xGrid"
              bean-name="${targetName}ServiceImpl"
              :form-data="formData"
              :title="entity+'导出'"
              :start-index="2"
          />
          <vxe-input class-name="vxe-button" style="display: inline-flex ; width: 100px" placeholder="当前页搜索"
                     @input="searchByText"/>
            #if($delCol)##
              <vxe-grid-cond-checkbox ref="showAllBox" :x-grid="$refs.xGrid" un-check-sql="${delCol.col} = 0"
                                      :after-click="showAll"/>#end##

          <el-tooltip placement="top">
            <div slot="content">颜色说明:
              <br/><span :style="'color: '+ grey">灰色: </span>被删除行
            </div>
            <vxe-button size="mini" type="text" status="warning">提示</vxe-button>
          </el-tooltip>
        </template>
      </vxe-page-grid>
    </el-main>
  </el-container>
</template>
<script>
import * as service from '@/api/${prefix}/${targetName}'
import VxeModifyBtn from '@/views/template/vxe-btn/vxe-modify-btn'
import VxeGridCondCheckbox from '@/views/template/other/vxe-grid-cond-checkbox'
import VxeExportBtn from '@/views/template/vxe-btn/vxe-export-btn'
import VxePageGrid from '@/views/template/other/vxe-page-grid'
import VxeSearchBtn from '@/views/template/vxe-btn/vxe-search-btn'
import gridMethod from '@/views/template/mixin/gridMethod'
import colorInfo from '@/views/template/mixin/colorInfo'
import VxeAddBtn from '@/views/template/vxe-btn/vxe-add-btn'
import VxeUpdateBtn from '@/views/template/vxe-btn/vxe-update-btn'
import VxeImportBtn from '@/views/template/vxe-btn/vxe-import-btn'
import VxeDeleteBtn from '@/views/template/vxe-btn/vxe-delete-btn'
import autoDs from '@/views/template/mixin/autoDs'
import XEUtils from 'xe-utils'
  export default {
    name: '${prefix}-${targetName}',
    components: {
      VxeAddBtn,
      VxeUpdateBtn,
      VxeImportBtn,
      VxeGridCondCheckbox,
      VxeDeleteBtn,
      VxeModifyBtn,
      VxeSearchBtn,
      VxePageGrid,
      VxeExportBtn
    },
    mixins: [ gridMethod, colorInfo, autoDs ],
    data: function () {
      return {
        title: '${pathChName}',
        entity: '${entityName}',
        formData: {
          condition: '',
          pageIndex: '',
          pageSize: '',
          order: 'id desc'
        },
        searchMethod: service.search,
        batchUpdateMethod: service.batchUpdate,
        batchMergeMethod: service.batchMerge,
        batchAddMethod: service.batchAdd,
        batchDeleteMethod: service.batchDelete,
        searchForm: [
            #foreach($col in $searchCols)##
              {##
                field: '${col.col}',##
                title: '${col.title}' ##
##                #if($col.fullFieldName)##
##                  ,param: '$col.fullFieldName'##
##                #end##
                  #if($col.isTime),##
                    type: 'vxe-range-picker',##
                    props: {type: 'date'} ##
                  #elseif($col.enumMap.size()>0),##
                    type: 'multi-select',##
                    options: [#foreach($para in ${col.enumMap.entrySet()}) ['${para.value}', '${para.key}'] #if($foreach.hasNext),#end #end ] ##
                  #elseif($col.enumList.size()>0),##
                    type: 'multi-select',##
                    options: '#foreach($para in ${col.enumList})${para}#if($foreach.hasNext),#end#end' ##
                  #elseif($col.cusMsg),##
                          $col.cusMsg ##
                  #else,##
                    type: 'vxe-boot-operation-ipt',##
                    operation: 'likeRight' ##
                  #end##
              } #if($foreach.hasNext) ,#end

            #end
        ],
        addForm: [
            #foreach($col in $addCols)##
              { ##
                field: '${col.field}',##
                title: '${col.title}' ##
                  #if($col.isTime),##
                    props: {type: 'date'} ##
                  #elseif($col.type == 'int'),##
                    props: {type: 'integer'} ##
                  #elseif($col.enumMap.size()>0),##
                    type: 'select',##
                    options: [#foreach($para in ${col.enumMap.entrySet()}) ['${para.value}', '${para.key}'] #if($foreach.hasNext),#end #end ] ##
                  #elseif($col.enumList.size()>0),##
                    type: 'select',##
                    options: '#foreach($para in ${col.enumList})${para}#if($foreach.hasNext),#end#end' ##
                  #elseif($col.editable==false),editable: false##
                  #elseif($col.cusMsg),##
                          $col.cusMsg ##
                  #else ##
                  #end##
                #if($col.isUnique),##
                rules: [{required: true}] ##
                #end
              } #if($foreach.hasNext) ,#end

            #end
        ],
        updateForm: [
            #foreach($col in $updateCols)##
              {##
                field: '${col.field}',##
                title: '${col.title}' ##
                  #if($col.isTime),##
                    props: {type: 'date'} ##
                  #elseif($col.type == 'int'),##
                    props: {type: 'integer'} ##
                  #elseif($col.isUnique),##
                    editable: false , rules: [{required: true}] ##
                  #elseif($col.editable==false),editable: false##
                  #elseif($col.enumMap.size()>0),##
                    type: 'select',##
                    options: [#foreach($para in ${col.enumMap.entrySet()}) ['${para.value}', '${para.key}'] #if($foreach.hasNext),#end #end ] ##
                  #elseif($col.enumList.size()>0),##
                    type: 'select',##
                    options: '#foreach($para in ${col.enumList})${para}#if($foreach.hasNext),#end#end' ##
                  #elseif($col.cusMsg),##
                          $col.cusMsg ##
                  #else ##
                  #end##
              } #if($foreach.hasNext) ,#end

            #end
        ],
        columns: [
          {type: 'seq', width: 50, fixed: 'left'},
          {type: 'checkbox', width: 45, fixed: 'left'},
            #foreach($col in $searchCols)##
              {##
                field: '${col.field}'##
                , title: '${col.title}' ##
                , sortable: true##
              } #if($foreach.hasNext) ,#end

            #end
        ]
      }
    },
    mounted() {
      this.$nextTick(() => {
        this.search()
      })
    },

    methods: {
      rowStyle({row}) {
        let rowStyle = {}
          #if($delCol)##
            if (row.${delCol.col}) {
              rowStyle.background = this.grey
            }
          #end##
        return rowStyle
      },
      showAll() {
        if (!this.$refs.searchForm.tryValidate()) {
          return
        }
        let condition = this.$refs.searchForm.getCondition()
        this.searchByCond(condition)
      },
      beforeShowAdd({form}) {
      },
      beforeShowUpdate({form, row}) {
      },
      deleteValidate({row}) {
      },
        #if($delCol)##
          reuseValidate({rows}) {
            for (let row of rows) {
              if (!row.${delCol.col}) {
                throw new Error('无法对有效数据重复生效')
              }
            }
            return true
          },
          deleteValidate({rows}) {
            for (let row of rows) {
              if (row.${delCol.col}) {
                throw new Error('无法对废止数据重复废止')
              }
            }
            return true
          }
        #end##
    },
    computed: {},
    watch: {}
  }
</script>
