<template>
  <el-container style="background-color: #ffffff; height: calc(100vh - 100px); width: 100% ; min-height: 400px">
    <el-main>
      <vxe-page-grid ref="xGrid"
                     :columns="columns"
                     :form-data="formData"
                     size="mini"
                     :search="searchMethod"
                     init-cond="${delCol.col} = 0"
                     overflow
                     :rowStyle="rowStyle"
      >
      <template #btns>
          <vxe-search-btn ref="searchForm" :search-form="searchForm" height="auto" width="500" :submit="searchByCond"/>
          <vxe-add-btn
                  :title="'新增'+entity"
                  :form-data="addForm"
                  :before-show="beforeShowAdd"
                  :add-method="batchAddMethod"
                  :after-add="search"
          />
          <vxe-update-btn
                  :x-grid="$refs.xGrid"
                  :title="'调整'+entity"
                  :form-data="updateForm"
                  :auto-reset="true"
                  :before-show="beforeShowUpdate"
                  :param-convert="({form})=>form"
                  :update-method="updateMethod"
                  :after-add="search"
          />
          <vxe-modify-btn
                  :x-grid="$refs.xGrid"
                  icon="el-icon-check"
                  status="warning"
                  name="生效"
                  :method="mergeMethod"
                  :param-convert="({rows})=> { rows.forEach(e=>e.${delCol.col} = 0) ; return rows }"
                  :after-modify="search"
          />
          <vxe-modify-btn
                  :x-grid="$refs.xGrid"
                  icon="el-icon-delete"
                  status="danger"
                  name="废止"
                  :method="mergeMethod"
                  :param-convert="({rows})=> { rows.forEach(e=>e.${delCol.col} = 1) ; return rows }"
                  :after-modify="search"
          />
          <vxe-delete-btn
                  :x-grid="$refs.xGrid"
                  :delete-method="batchDeleteMethod"
                  :after-delete="search"
          />
          <vxe-import-btn
                  :x-grid="$refs.xGrid"
                  :title="entity+'导入模板'"
                  :form-data="addForm"
                  :add-method="mergeMethod"
                  :after-add="trySearch"
          />
          <vxe-export-btn :x-grid="$refs.xGrid"
                          bean-name="${targetName}ServiceImpl"
                          :form-data="formData"
                          :title="entity+'导出'"
                          :start-index="2"
          />
          <vxe-grid-cond-checkbox ref="showAllBox" :x-grid="$refs.xGrid" un-check-sql="${delCol.col} = 0" :after-click="showAll"/>
          <el-tooltip placement="top">
            <div slot="content" >颜色说明:
              <br/><span :style="'color: '+ grey">灰色: </span>被删除行
            </div>
            <vxe-button  size="mini" type="text" status="warning">提示</vxe-button>
          </el-tooltip>
        </template>
      </vxe-page-grid>
    </el-main>
  </el-container>
</template>
<script>
import * as service from '@/api/${prefix}/${targetName}'
import VxeExportBtn from '@/views/template/vxe-export-btn'
import VxePageGrid from '@/views/template/vxe-page-grid'
import VxeSearchBtn from '@/views/template/vxe-search-btn'
import gridMethod from '@/views/template/mixin/gridMethod'
import colorInfo from '@/views/template/mixin/colorInfo'
import VxeModifyBtn from '@/views/template/vxe-modify-btn'
import VxeGridCondCheckbox from '@/views/template/other/vxe-grid-cond-checkbox'
import VxeAddBtn from '@/views/template/vxe-add-btn'
import VxeUpdateBtn from '@/views/template/vxe-update-btn'
import VxeImportBtn from '@/views/template/vxe-import-btn'
import VxeDeleteBtn from '@/views/template/vxe-delete-btn'

export default {
  name: '${prefix}-${targetName}',
  components: {  VxeAddBtn , VxeUpdateBtn , VxeImportBtn ,VxeGridCondCheckbox,VxeDeleteBtn, VxeModifyBtn, VxeSearchBtn, VxePageGrid, VxeExportBtn },
  data: function () {
    return {
      title: '${pathChName}',
      entity: '${entityName}',
      formData: {
        condition: '',
        pageIndex: '',
        pageSize: '',
        order: ''
      },
      searchMethod: service.search,
      updateMethod: service.update,
      mergeMethod: service.merge,
      batchAddMethod: service.batchAdd,
      batchDeleteMethod: service.batchDelete,
      searchForm: [
#foreach($col in $searchCols)##
        { field: '${col.col}', title: '${col.title}' ##
#if($col.isTime), type: 'vxe-range-picker', props: { type: 'date' } ##
#elseif($col.enumMap.size()>0), type: 'select', options: [#foreach($para in ${col.enumMap.entrySet()}) ['${para.value}' ,'${para.key}'] #if($foreach.hasNext),#end #end ] ##
#elseif($col.cusMsg), $col.cusMsg ##
#else, type: 'vxe-boot-operation-ipt', operation: 'likeRight' ##
#end##
} #if($foreach.hasNext) ,#end

#end
      ],
      addForm: [
#foreach($col in $addCols)##
        { field: '${col.field}', title: '${col.title}' ##
#if($col.isTime), props: { type: 'date' } ##
#elseif($col.enumMap.size()>0), type: 'select', options: [#foreach($para in ${col.enumMap.entrySet()}) ['${para.value}' ,'${para.key}'] #if($foreach.hasNext),#end #end ] ##
#else ##
#end##
} #if($foreach.hasNext) ,#end

#end
      ],
      updateForm: [
#foreach($col in $updateCols)##
        { field: '${col.field}', title: '${col.title}' ##
#if($col.isTime), props: { type: 'date' } ##
#elseif($col.enumMap.size()>0), type: 'select', options: [#foreach($para in ${col.enumMap.entrySet()}) ['${para.value}' ,'${para.key}'] #if($foreach.hasNext),#end #end ] ##
#else ##
#end##
} #if($foreach.hasNext) ,#end

#end
      ],
      columns: [
        { type: 'seq', width: 50, fixed: 'left' },
        { type: 'checkbox', width: 45, fixed: 'left' },
        #foreach($col in $searchCols)##
{ field: '${col.field}', title: '${col.title}' ##
#if($col.isTime) ##
#elseif($col.enumMap.size()>0), filters:  [#foreach($para in ${col.enumMap.entrySet()}) { label: '$para.value', value: '${para.key}' } #if($foreach.hasNext),#end #end ] ##
#else ##
#end##
#if($col.col!=$col.field), params: { property: '${col.col}' }#end##
, sortable: true } #if($foreach.hasNext) ,#end

#end
      ]
    }
  },
  mounted () {
    this.$nextTick(() => {
      this.search()
    })
  },
  mixins: [
    gridMethod,
    colorInfo
  ],
  methods: {
    rowStyle (row) {
      let rowStyle = {}
      let data = row.row
      if (data.${delCol.col}) {
        rowStyle.background = this.grey
      }
      return rowStyle
    },
    showAll () {
      if (!this.$refs.searchForm.tryValidate()) {
        return
      }
      let condition = this.$refs.searchForm.getCondition()
      this.searchByCond(condition)
    },
    beforeShowAdd ({ form }) {
    },
    beforeShowUpdate ({ form, row }) {
    },
  },
  computed: {},
  watch: {
  }
}
</script>
