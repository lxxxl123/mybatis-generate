<template>
  <el-container style="background-color: #ffffff; height: calc(100vh - 100px); width: 100% ; min-height: 400px">
    <el-main>
      <vxe-page-grid ref="xGrid"
                     :columns="columns"
                     :form-data="formData"
                     size="mini"
                     :height-light="true"
                     :show-total="true"
                     :page-size="5000"
                     :toolBar="{ refresh: {query: currentReload} , filter: { columns } }"
                     :rowConfig="{ isCurrent: true , isHover: true, height: 30 , keyField: 'id'}"
                     :checkboxConfig="{ trigger: 'cell', range: true }"
                     :search="searchMethod"
                     :sort-by-remote="false"
                     @current-change="currentChange"
                     overflow
      >
      <template #btns>
          <vxe-search-btn ref="searchForm" :search-form="searchForm" height="auto" width="500" :submit="searchByCond"/>
          <vxe-add-btn
                  :title="'新增'+entity"
                  :form-data="addForm"
                  :before-show="beforeShowAdd"
                  :add-method="batchAddMethod"
                  :after-add="search"
          />
          <vxe-update-btn
              ref="updateBtn"
              :x-grid="$refs.xGrid"
              :title="'修改'+entity"
              style="display: none;"
              name="修改"
              :form-data="addForm"
              :param-convert="({form, row})=> [ form ] "
              :update-method="batchUpdateMethod"
              :after-invoke="search"
          />
          <vxe-delete-btn
                  :x-grid="$refs.xGrid"
                  :delete-method="batchDeleteMethod"
                  :after-delete="search"
          />
          <el-input size="mini"  style="width: 120px; padding-left: 12px; padding-right: 6px " placeholder="搜索当前页" v-model="searchText" maxlength="70" clearable @input="(val)=> searchByText({ value: val })"/>
          <el-input size="mini"  style="width: 180px; margin-left: 12px" placeholder="请输入人员信息" v-model="formData.${leftSearchKey}" maxlength="70" clearable>
             <el-button size="mini" slot="append" icon="el-icon-search" @click="search"></el-button>
          </el-input>
        </template>
      </vxe-page-grid>
    </el-main>
  </el-container>
</template>
<script>
import * as service from '@/api/${prefix}/${targetName}'
import VxeModifyBtn from '@/views/template/vxe-btn/vxe-modify-btn'
import VxeGridCondCheckbox from '@/views/template/other/vxe-grid-cond-checkbox'
import VxeExportBtn from '@/views/template/vxe-btn/vxe-export-btn'
import VxePageGrid from '@/views/template/other/vxe-page-grid'
import VxeSearchBtn from '@/views/template/vxe-btn/vxe-search-btn'
import gridMethod from '@/views/template/mixin/gridMethod'
import colorInfo from '@/views/template/mixin/colorInfo'
import VxeAddBtn from '@/views/template/vxe-btn/vxe-add-btn'
import VxeUpdateBtn from '@/views/template/vxe-btn/vxe-update-btn'
import VxeImportBtn from '@/views/template/vxe-btn/vxe-import-btn'
import VxeDeleteBtn from '@/views/template/vxe-btn/vxe-delete-btn'
import XEUtils from 'xe-utils'

export default {
  name: '${prefix}-${vueName}-left',
  components: {  VxeAddBtn , VxeUpdateBtn , VxeImportBtn ,VxeGridCondCheckbox,VxeDeleteBtn, VxeModifyBtn, VxeSearchBtn, VxePageGrid, VxeExportBtn },
  data: function () {
    return {
      title: '${pathChName}',
      entity: '${entityName}',
      formData: {
        condition: '',
        pageIndex: '',
        pageSize: '',
        order: '',
        ${leftSearchKey}: '',
      },
      searchText: '',
      searchMethod: service.search,
      batchUpdateMethod: service.batchUpdate,
      batchMergeMethod: service.batchMerge,
      batchAddMethod: service.batchAdd,
      batchDeleteMethod: service.batchDelete,
      searchForm: [
#foreach($col in $searchCols)##
        { field: '${col.col}', title: '${col.title}' ##
#if($col.isTime), type: 'vxe-range-picker', props: { type: 'date' } ##
#elseif($col.enumMap.size()>0), type: 'select', options: [#foreach($para in ${col.enumMap.entrySet()}) ['${para.value}' ,'${para.key}'] #if($foreach.hasNext),#end #end ] ##
#elseif($col.enumList.size()>0), type: 'select', options: '#foreach($para in ${col.enumList})${para}#if($foreach.hasNext),#end#end' ##
#elseif($col.cusMsg), $col.cusMsg ##
#else, type: 'vxe-boot-operation-ipt', operation: 'likeRight' ##
#end##
} #if($foreach.hasNext) ,#end
#end
      ],
      addForm: [
#foreach($col in $addCols)##
        { field: '${col.field}', title: '${col.title}' ##
#if($col.isTime), props: { type: 'date' } ##
#elseif($col.enumMap.size()>0), type: 'select', options: [#foreach($para in ${col.enumMap.entrySet()}) ['${para.value}' ,'${para.key}'] #if($foreach.hasNext),#end #end ] ##
#elseif($col.enumList.size()>0), type: 'select', options: '#foreach($para in ${col.enumList})${para}#if($foreach.hasNext),#end#end' ##
#elseif($col.cusMsg), $col.cusMsg ##
#else ##
#end##
} #if($foreach.hasNext) ,#end
#end
      ],
      columns: [
        { type: 'seq', width: 50, fixed: 'left' },
        { type: 'checkbox', width: 45, fixed: 'left' },
        #foreach($col in $searchCols)##
{ field: '${col.field}', title: '${col.title}' ##
#if($col.isTime) ##
#elseif($col.enumMap.size()>0), filters:  [#foreach($para in ${col.enumMap.entrySet()}) { label: '$para.value', value: '${para.key}' } #if($foreach.hasNext),#end #end ] ##
#else ##
#end##
#if($col.col!=$col.field), params: { property: '${col.col}' }#end##
, sortable: true } #if($foreach.hasNext) ,#end
#end
        ,{ title: '操作',
          align: 'center',
          width: 85,
          cellRender: {
            name: 'vxe-operations',
            props: {
              btns: [
                { icon: 'el-icon-edit-outline', click: ({ row }) => { this.$refs .updateBtn.tryShowForm({ row }) } }
              ]
            }
          }
        }
      ]
    }
  },
  mounted () {
    this.$nextTick(() => {
        this.$refs.xGrid.active()
        this.search()
    })
  },
  mixins: [
    gridMethod,
    colorInfo
  ],
  methods: {
    searchByText (val) {
       #set($rowVal='this.$refs.xGrid.searchByText(val.value)')##
       $rowVal
    },
    currentReload () {
      this.formData.${leftSearchKey} = ''
      this.$nextTick(() => {
        this.reload()
      })
    },
    afterSearch () {
      let row = XEUtils.get(this.$refs.xGrid.getVisibleData(), 0)
      if (row) {
        this.$refs.xGrid.setCurrentRow(row)
        this.currentChange()
      }
    },
    beforeShowAdd ({ form }) {
    },
    beforeShowUpdate ({ form, row }) {
    },
    currentChange () {
      let row = this.getSingleRow()
      this.$emit('rowChange', { row })
    },
  },
  computed: {},
  watch: {
  }
}
</script>
