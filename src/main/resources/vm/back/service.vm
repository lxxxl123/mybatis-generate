package ${package}.${service}.${prefix}.${serviceImpl};

import com.haday.qms.service.base.impl.BaseServiceImpl;
import com.haday.qms.core.tool.utils.CollUtils;
import ${package}.${service}.${prefix}.${name}Service;
import ${package}.${dao}.${prefix}.${name}Mapper;
import ${package}.${entity}.${prefix}.${name};
import org.springframework.stereotype.Service;
import com.haday.qms.core.tool.utils.MessageBuilder;
import java.util.List;
import com.haday.qms.core.tool.support.Validators;
import com.haday.qms.core.tool.support.QueryProxy;
import java.util.Map;
import cn.hutool.core.collection.CollUtil;
import lombok.extern.slf4j.Slf4j;
import com.haday.qms.core.tool.support.PlainWrapper;
import org.springframework.transaction.annotation.Transactional;
import com.haday.qms.core.tool.support.ExceptionTool;

import com.haday.qms.interceptor.anno.Try;
import com.haday.qms.vo.SearchVo;
import com.alibaba.fastjson2.JSONObject;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;

import java.io.Serializable;
import java.util.Collection;

/**
* @author ${author}
*/
@Service
@Slf4j
public class ${name}ServiceImpl extends BaseServiceImpl<${name}Mapper, ${name}>
    implements ${name}Service {

    public QueryProxy baseSelect(){
        return QueryProxy.ofFun(baseMapper::select);
    }

    public void validate(List<$name> list){
        for (${name} obj : list) {
            Validators.of(obj)
            #foreach($column in $columns)
#if(${column.maxLength} && ${column.type} == "nvarchar") .checkMaxNLength(${name}::get${column.javaFiledNameUpCaseFirst},${column.maxLength},"${column.title}")
#end
#if(${column.maxLength} && ${column.type} == "varchar") .checkMaxLength(${name}::get${column.javaFiledNameUpCaseFirst},${column.maxLength},"${column.title}")
#end
            #end
        .tryThrow();
        }
    }

    public void afterUpdate(List<$name> list){
    }


    public void check(List<${name}> list) {
        List<Map<String, Object>> res = baseMapper.check(list);
        ExceptionTool.checkList(res, new MessageBuilder("</br>","</br>",""));
    }

    @Transactional(rollbackFor = Exception.class)
    public Integer batchAdd(List<${name}> list) {
        validate(list);
        super.batchAdd(list);
        afterUpdate(list);
        return list.size();
    }

    @Transactional(rollbackFor = Exception.class)
    public Integer batchUpdate(List<${name}> list) {
        validate(list);
        updateListById(list);
        afterUpdate(list);
        return list.size();
    }

    public Integer batchMerge(List<$name> list){
        validate(list);
        CollUtils.partitionList(list,100)
            .forEach(e->{
            baseMapper.batchMerge(e);
        });
        afterUpdate(list);
        return list.size();
    }

    public Integer batchDelete(List<String> ids) {
        return super.batchDelete(ids);
    }

    public List<${name}> getListById(Object obj) {
        return baseSelect().setWrapper(PlainWrapper.of()
                        .tryIn(${name}::getId, CollUtils.toList(obj))
                        .blockIfEmpty()
                        )
                .getList(${name}.class);
    }

    public ${name} getOneById(Object id) {
        return CollUtil.getFirst(getListById(id));
    }



    public int batchDelete(Collection<? extends Serializable> ids) {
        return super.logicDeleteBatchByIds(ids);
    }


    public Page<Map<String,Object>> search(JSONObject obj) {
        PlainWrapper wrapper = PlainWrapper.ofObj(obj);
        return baseSelect().setWrapper(wrapper).getPage();
    }


    public Page<?> export(JSONObject body, Page<?> page) {
        return search(getExportJson(body, page));
    }

}

