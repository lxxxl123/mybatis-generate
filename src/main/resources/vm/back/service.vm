package ${package}.${service}.${prefix}.${serviceImpl};

import com.haday.qms.service.base.impl.BaseServiceImpl;
import com.haday.qms.core.tool.utils.CollUtils;
import ${package}.${service}.${prefix}.${name}Service;
import ${package}.${dao}.${prefix}.${name}Mapper;
import ${package}.${entity}.${prefix}.${name};
import org.springframework.stereotype.Service;
import java.util.List;
import com.haday.qms.core.tool.support.QueryProxy;
import java.util.Map;
import lombok.extern.slf4j.Slf4j;
import com.haday.qms.core.tool.support.PlainWrapper;
import org.springframework.transaction.annotation.Transactional;

#if($buildSelectList||$buildSelectPage)
import com.haday.qms.interceptor.anno.Try;
import com.haday.qms.vo.SearchVo;
import com.alibaba.fastjson2.JSONObject;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
#end

/**
* @author ${author}
*/
@Service
@Slf4j
public class ${name}ServiceImpl extends BaseServiceImpl<${name}Mapper, ${name}>
    implements ${name}Service {

    public void validate(List<$name> list){
    }

    @Transactional(rollbackFor = Exception.class)
    @Try
    public Integer batchAdd(List<${name}> list) {
        validate(list);
        super.batchAdd(list);
        return list.size();
    }

    @Transactional(rollbackFor = Exception.class)
    @Try
    public Integer batchUpdate(List<${name}> list) {
        validate(list);
        updateListById(list);
        return list.size();
    }

    #if(${isMerge})@Try
    public Integer batchMerge(List<$name> obj){
        validate(obj);
        CollUtils.partitionList(obj,100)
            .forEach(e->{
            baseMapper.batchMerge(e);
        });
        return obj.size();
    }#end ##

    public QueryProxy baseSelect(){
        return QueryProxy.ofFun(baseMapper::select);
    }


#if(${buildSelectPage})##
    public Page<Map<String,Object>> search(JSONObject obj) {
        PlainWrapper wrapper = PlainWrapper.ofObj(obj);
        return baseSelect().setWrapper(wrapper).getPage();
    }
#end ##
#if(${buildSelectList})##
    @Try
      public List search(JSONObject obj) {
        PlainWrapper wrapper = PlainWrapper.ofObj(obj);
        return baseMapper.select(wrapper.buildPage(), wrapper);
    }
#end ##

#if(${buildExport})##
    public Page<?> export(JSONObject body, Page<?> page) {
        return search(getExportJson(body, page));
    }
#end ##

}

